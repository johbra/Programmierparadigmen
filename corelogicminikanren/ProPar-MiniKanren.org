#+SETUPFILE: ./theme-bigblow-local.setup
#+TITLE: Logische Programmierung mit miniKanren
#+SUBTITLE: Programmierparadigmen
#+AUTHOR: Johannes Brauer
#+OPTIONS:   H:4
#+OPTIONS: num:nil d:nil
#+OPTIONS: toc:nil
#+OPTIONS: reveal_single_file:nil
#+Language:  de
#+STARTUP: latexpreview
#+STARTUP: inlineimages
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="mycss/mystyle.css" />
#+REVEAL_THEME: simple
#+REVEAL_TRANS: slide
#+REVEAL_HLEVEL: 1
#+REVEAL_INIT_SCRIPT: dependencies: [ { src: 'plugin/menu/menu.js', async: true },
#+REVEAL_INIT_SCRIPT:                 { src: 'reveal.js/plugin/zoom-js/zoom.js', async: true } ]
#+REVEAL_MARGIN: 0.05
#+REVEAL_EXTRA_CSS: ./mycss/myrevealstyle.css
#+OPTIONS: reveal_control:t

* Grundlagen
+ [[http://minikanren.org][miniKanren]] ist eine domänenspezifische Sprache (DSL) für die
  Einbettung der Logikprogrammierung in verschiedene [[http://minikanren.org/#implementations][Wirtssprachen]].
+ Darunter sind Scheme/Racket, Clojure, Javascript, Java, C#.
+ ursprüngliche Implementierung in Scheme
+ miniKanren kann leicht erweitert werden, z.B. für Constraint Logic
  Programming.
+ Buch: The Reasoned Schemer cite:Friedman2018
* Einführung
** Kernbestandteile der Sprache
+ Die Wirtsprache (hier: Clojure) wird um drei Operationen erweitert:
  + ~==~ für die Unifikation (in Prolog: ~=~)
  + =fresh= für die Deklaration von Variablen (in Prolog:
    Großschreibung von Bezeichnern)
  + =conde= für Fallunterscheidungen
+ Die =run=-Form bildet die Schnittstelle zur Wirtssprache.
+ Die Syntax eines logischen Programms (gemäß der
  core.logic-Bibliothek für Clojure):
  #+BEGIN_SRC clojure
 (run* [logic-variable]
   &logic-expressions)  
  #+END_SRC
+ Die Semantik: Nimm die Menge der logischen Ausdrücke
  (=logic-expressions=), lass sie durch den Löser laufen und gib alle
  Werte von =logic-variable= zurück, die die logischen Ausdrücke erfüllen.
+ Statt =(run* [...] ...)= kann man auch =(run n [...] ...)=
  schreiben, wobei =n= die Anzahl der gewünschten Resultate angibt.
** Elementare Beispiele 
+ Einbindung der [[https://github.com/clojure/core.logic][core.logic-Bibliothek]] ([[https://clojure.github.io/core.logic/#clojure.core.logic.fd/!=][Dokumentation]]), die die Einbettung von
  miniKanren in Clojure bewerkstelligt:
  #+BEGIN_SRC clojure :results results :tangle yes :exports yes
  (use 'clojure.core.logic)
  #+END_SRC

  #+RESULTS:
  : nil

+ ~==~ unifiziert zwei Terme.
+ =fresh= führt lokale Clojure-Variablen ein, die an neue logische
  Variablen gebunden werden.
+ =fresh= führt eine Konjunktion der Relationen in seinem Rumpf aus.
+ Der Ausdruck
  #+BEGIN_SRC clojure :results results :tangle yes :exports yes
  (fresh (x y z) (== x z) (== 3 y))
  #+END_SRC

  #+RESULTS:
  : #function[user/eval9395/fn--9396]

  führte die logischen Variablen =x=, =y= und =z=, und assoziierte =x=
  mit =z= und =y= mit 3. Allerdings ist das kein korrektes miniKanren
  Program. Der Ausdruck muss in die =run=-Form eingerahmt werden:
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run 1 (q) (fresh (x y z) (== x z) (== 3 y)))
  #+END_SRC

  #+RESULTS:
  (_0)

  Das Resultat ist eine Liste mit dem Wert =_0=, das ist der
  verdinglichte Wert einer ungebunden Query-Variable =q=.
+ =q= ist auch in dem folgenden Ausdruck ungebunden:
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes 
  (run 1 (q) (fresh (x y) (== x q) (== 3 y)))  
  #+END_SRC

  #+RESULTS:
  (_0)

+ In den folgenden Ausdrücken wird die Query-Variable durch Unifikation gebunden:
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes 
  (run 1 (y)
    (fresh (x z)
      (== x z)
      (== 3 y)))
  #+END_SRC

  #+RESULTS:
  (3)

  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run 1 (q)
    (fresh (x z)
      (== x z)
      (== 3 z)
      (== q x)))
  #+END_SRC

  #+RESULTS:
  (3)

  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run 1 (y)
    (fresh (x y)
      (== 4 x)
      (== x y))
    (== 3 y))
  #+END_SRC

  #+RESULTS:
  (3)

+ Ein =run= Ausdruck liefert eine Liste mit den Resultaten. Diese kann
  leer sein, wenn der Ausdruck im Rumpf logisch inkonsistent ist.
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes 
  (run 1 (x) (== x 5) (== x 3))  
  #+END_SRC

  #+RESULTS:
  ()

** Definitionen
+ Ein /logischer Ausdruck/ besteht aus einer Menge von /logischen
  Variablen/ und einer Menge von /Regeln/ (constraints), die die Werte
  der Variablen einschränken.
+ Eine /logische Variable/ (häufig mit /lvar/ abgekürzt) kann
  verschiedene Werte annehmen aber immer nur einen zu einem Zeitpunkt.
+ Beispiel: Das Programm
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
    (membero q [1 2 3])
    (membero q [2 3 4]))  
  #+END_SRC

  #+RESULTS:
  (2 3)

  kann folgendermaßen gelesen werden: Der Löser soll alle Werte von
  =q= liefern, so dass =q= Element des Vektors [1 2 3] *und* Element
  des Vektors [2 3 4] ist.
*** Namenskonventionen
+ Clojure bietet mit seiner miniKanren-Einbettung core.logic die
  Möglichkeit funktionales und logisches Programmieren miteinander zu verbinden.
+ Um Relationen wie =membero= oder =appendo= von ihren funktionalen
  Pendants äußerlich gut unterscheiden zu können wird an diese häufig
  ein Vokal angehängt.
** Logische Variablen
+ entsprechen weitgehend lokalen Variablen in Clojure: begrenzter
  Gültigkeitsbereich, keine Mutation
+ Der Wert einer logischen Variablen kann undefiniert (oder beliebig)
  sein. Werte dieser Art werden durch die Notation =_N= dargestellt,
  wobei N eine natürliche Zahl ist.
+ Wenn eine lvar einen =_N=-Wert hat, bedeutet das, dass sie einen
  beliebigen Wert annehmen könnte ohne dass die Gültigkeit der Regeln
  verletzt würde.
+ Besitzen zwei lvars die Werte _0 bzw. _1 sind deren Werte beliebig
  und dürfen auch unterschiedlich sein.
+ Besitzen zwei lvars den Wert _0 sind deren Werte beliebig aber
  gleich.
+ Logische Variablen werden auf zwei Arten deklariert:
  + Die Haupt- bzw. Query-Variable wird durch die =run=-Form eingeführt:
    : (run* [query-variable] ...)
    + Ihre (möglichen) Werte bilden das Resultat des =(run* ...)=-Ausdrucks.
    + Es gibt nur eine Hauptvariable.
  + Weitere lvars werden durch die =fresh=-Klausel definiert. Durch
    : (fresh [a b c] &logic-expressions)
    werden drei lvars deklariert, die innerhalb der =logic
    expressions= benutzt werden können.
** Regeln
+ Logische Ausdrücke schränken die Wertebereiche logischer Variablen ein.
+ Alle Ausdrücke innerhalb der =run=-Form werden konjunktiv verknüpft.
+ Der Ausdruck
  #+BEGIN_SRC clojure
  (run* [q]
    (constraint-1)
    (constraint-2)
    (constraint-3))
  #+END_SRC
+ In der Terminologie von miniKanren werden (ähnlich wie in Prolog)
  die einzelnen Terme einer Konjunktion auch als /Ziele/ (goals), die
  erreicht werden (goal succeeds) oder verfehlt werden (goal fails).

  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [v]
    (fresh [q]
    (membero q [1 2 3])
    (membero q [2 3 4])))
  #+END_SRC

  #+RESULTS:
  (_0 _0)

** Die Operatoren
*** =fresh=
siehe oben
*** Die Unifikation: ~==~
+ Der Ausdruck ~(== lvar1 lvar2)~ sorgt dafür, dass die beiden lvars
  die gleiche Menge möglicher Werte besitzen. Das Ziel wird erreicht,
  wenn =lvar1= in Übereinstimmung mit =lvar2= gebracht werden kann.
**** Unifikation einer einzelnen Variablen mit einem Literal
+ Für eine der Variablen kann ein Clojure Literal verwendet werden.
+ Das Ziel in dem Ausdruck
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
    (== q 1))
  #+END_SRC

  #+RESULTS:
  (1)

  wird erreicht, wenn =q= den Wert 1 annehmen kann. Da =run*= die
  Variable =q= in einem frischen Zustand einführt, ist das
  möglich. Daher ist das Resultat der Auswertung des Ausdrucks (1).
+ Auch Exemplare komplexerer Datentypen können unifiziert werden:
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
    (== q {:a 1 :b 2}))
  #+END_SRC

  #+RESULTS:
  ({:a 1, :b 2})

  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
    (== {:a q :b 2} {:a 1 :b 2}))
  #+END_SRC

  #+RESULTS:
  (1)

+ Die Reihenfolge der Argumente von ~==~ ist belanglos: Der Ausdruck
  : (run* [q] (== 1 q))
  liefert (1).
**** Unifikation von zwei Variablen
+ Beispiel:
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
   (fresh [a]
     (membero a [1 2 3])
     (membero q [3 4 5])
     (== a q)))
  #+END_SRC

  #+RESULTS:
  (3)

+ Hier wird mit =fresh= eine neue Variable =a=. Die beiden ersten
  Ziele bestimmen, dass $a\in\{1,2,3\} \land q\in\{3,4,5\}$ gilt. Die
  Unifikation ~(== a q)~ sorgt dafür, dass beide Variablen an die
  Schnittmenge gebunden werden.
**** Die Reihenfolge der Ziele ist irrelevant ...
+ ... bezüglich der Bestimmung des Wertes einer =run=-Form.
+ Die beiden Ausdrücke
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
   (fresh [a]
     (membero a [1 2 3])
     (membero q [3 4 5])
     (== a q)))
  #+END_SRC
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes 
  (run* [q]
   (fresh [a]
     (membero a [3 4 5])
     (== q a)
     (membero q [1 2 3])))
  #+END_SRC

  #+RESULTS:
  (3)

  liefern das gleiche Ergebnis: (3).
*** =conde=
+ =conde= ermöglicht die disjunktive Verknüpfung von Zielen.
+ Syntax:
  : (conde &clauses)
+ Die Semantik kann durch folgende Analogiebetrachtung erklärt werden:
  #+BEGIN_SRC clojure
  (run* [q]
     (conde
       [goal1 goal2 ...]
       ...))  
  #+END_SRC
  ist vergleichbar mit 
  #+BEGIN_SRC clojure
  (run* [q]
     (OR
       [goal1 AND goal2 AND ...]
       ...))  
  #+END_SRC
**** Beispiele
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
     (conde
       [succeed]))
  #+END_SRC

  #+RESULTS:
  (_0)

  =succeed= ist immer erfolgreich. =q= kann jeden Wert annehmen.

  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
     (conde
       [succeed succeed succeed]))
  #+END_SRC

  #+RESULTS:
  (_0)

  erfolgreiche Konjunktion, =q= kann jeden Wert annehmen.

  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
     (conde
       [succeed fail succeed]))
  #+END_SRC

  #+RESULTS:
  ()

  nicht erfolgreiche Konjunktion, der Wert für =q= ist ().

  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
     (conde
       [succeed]
       [succeed]))
  #+END_SRC

  #+RESULTS:
  (_0 _0)

  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
     (conde
       [s#]
       [u#]))
  #+END_SRC

  #+RESULTS:
  (_0)

  Jedes Ziel innerhalb einer =conde=-Klausel wird unabhängig
  voneinander erfüllt oder nicht. (=s#= kurz für =succeed=, =u#= kurz
  für =fail=)

  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
     (conde
       [s# (== q 1)]))
  #+END_SRC

  #+RESULTS:
  (1)

  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
     (conde
       [(== q 2) (== q 1)]))
  #+END_SRC

  #+RESULTS:
  ()

  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes
  (run* [q]
     (conde
       [(== q 2)] 
       [(== q 1)]))
  #+END_SRC

  #+RESULTS:
  (2 1)

** Die „Relationifizierung” einer Funktion

+ Eine klassische Funktion:
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes 
  (def rember
    (fn [x l]
      (cond
        (empty? l) l
        (= x (first l)) (rest l)
        :else (cons (first l) (rember x (rest l))))))
  (rember 'f '(e f g h i f j k l))
  #+END_SRC
+ Umwandlung in eine Relation (1. Versuch):
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes 
  (defn rembero1 [x l out]
    (conde
      [(emptyo l)   (== () out)]
      [(firsto l x) (resto l out)]
      [s#           (fresh [a d res]
                      (resto l d)
                      (firsto l a)
                      (conso a res out)
                      (rembero1 x d res))]))
  (run* [q] (rembero1 'f '(e f g h i f j k l) q))
  #+END_SRC

  #+RESULTS:
  #'user/rembero1((e g h i f j k l) (e f g h i j k l) (e f g h i f j k l))

+ Umwandlung in eine Relation (2. Versuch):
  #+BEGIN_SRC clojure :results raw :tangle yes :exports yes 
  (defn rembero1 [x l out]
    (conde
      [(emptyo l)   (== () out)]
      [(firsto l x) (resto l out)]
      [s#           (fresh [a d res]
                      (resto l d)
                      (firsto l a)
                      (conso a res out)
                      (!= a x)
                      ;;;;;;;;
                      (rembero1 x d res))]))
  (run* [q] (rembero1 'f '(e f g h i f j k l) q))
  #+END_SRC

  #+RESULTS:
  #'user/rembero1((e g h i f j k l))

# * Weitere Anwendungen
# siehe [[file:~/Dropbox/Programmierparadigmen/Clojure/logic-tutorial/ProPar-CoreLogicAnwndngn.org][dort]]
* bibliography:referenzen.bib
